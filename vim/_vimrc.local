" orig settings
set nocompatible
set nu
set hlsearch
set nobackup
set incsearch
set cindent
set tabstop=4
set shiftwidth=4
set expandtab

" no-ignorecase
set noic
" disable mouse
set mouse=""
" set color-256
set t_Co=256
" disable visual indent (with g:indent_guides_auto_colors)
set nolist
" set right margin
set colorcolumn=81

colorscheme kolor

" disable auto cd when nerdtree starts
" let g:spf13_no_autochdir = 1 <-- move to .vimrc.before.local
" let g:autoclose_on = 0 # autoclose is replaced by autopairs
let g:NERDTreeChDirMode = 0
let g:NERDTreeWinPos = "right"
let g:NERDTreeWinSize = 40
let g:nerdtree_tabs_startup_cd = 0
let g:ackprg = "ack-grep -w -s -H --nocolor --nogroup --column"
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1
let g:tagbar_left = 1
let g:tagbar_width = 50
let g:indent_guides_auto_colors = 0
" NOTE:
" <Leader><Leader>w to call EasyMotion
" <Leader><Leader>fx to find 'x'
" <Leader> is ',' currently
let g:EasyMotion_smartcase = 1
let g:rainbow_active = 1
let g:airline_theme = "papercolor"
let g:CCTreeOrientation = "rightbelow"
let g:CCTreeWindowMinWidth = 40
let g:CCTreeKeyTraceForwardTree = '<C-\>>'
let g:CCTreeKeyTraceReverseTree = '<C-\><'
let g:CCTreeKeyHilightTree = '<C-l>'
let g:CCTreeKeySaveWindow = '<C-\>y'
let g:CCTreeKeyToggleWindow = '<C-\>w'
let g:CCTreeKeyCompressTree = 'zs'
let g:CCTreeKeyDepthPlus = '<C-\>='
let g:CCTreeKeyDepthMinus = '<C-\>-'
""" disable auto_pairs
""" let g:AutoPairs = {}
" NOTE:
" add a pure paren by Ctrl+V paren in editting mode
let g:AutoPairsMapCR = 1
let g:AutoPairsCenterLine = 0
let g:AutoPairsFlyMode = 1

" keymap
nnoremap <silent> <F5> :Tagbar<CR>
nnoremap <silent> <F6> :NERDTreeToggle<CR>
nnoremap <silent> <F7> :Ack!<CR>
nnoremap <silent> <F9> :CCTreeLoadXRefDB<CR>
nnoremap <silent> <F10> :NeoCompleteToggle<CR>
nnoremap <silent> < :bp<CR>
nnoremap <silent> > :bn<CR>
nnoremap <silent> 1 :b1<CR>
nnoremap <silent> 2 :b2<CR>
nnoremap <silent> 3 :b3<CR>
nnoremap <silent> 4 :b4<CR>
nnoremap <silent> 5 :b5<CR>
nnoremap <silent> 6 :b6<CR>
nnoremap <silent> 7 :b7<CR>
nnoremap <silent> 8 :b8<CR>
nnoremap <silent> 9 :b9<CR>
nnoremap <Leader>r :RunInInteractiveShell<space>
nnoremap <Leader>gs :RunInInteractiveShell git status<CR>
nnoremap <Leader>gd :RunInInteractiveShell git diff<CR>
nnoremap <Leader>gc :RunInInteractiveShell git commit -as<CR>
nnoremap <Leader>gb :RunInInteractiveShell git blame<CR>
nnoremap <Leader>gl :RunInInteractiveShell git log<CR>
nnoremap <Leader>gp :RunInInteractiveShell git push<CR>
nnoremap <Leader>gw :RunInInteractiveShell git write<CR>
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

autocmd FileType c highlight clear SpellBad
autocmd FileType c highlight clear SpellCap
autocmd FileType c highlight clear SpellRare
autocmd FileType c highlight clear SpellLocal

autocmd FileType h highlight clear SpellBad
autocmd FileType h highlight clear SpellCap
autocmd FileType h highlight clear SpellRare
autocmd FileType h highlight clear SpellLocal

autocmd FileType S highlight clear SpellBad
autocmd FileType S highlight clear SpellCap
autocmd FileType S highlight clear SpellRare
autocmd FileType S highlight clear SpellLocal

autocmd FileType asm highlight clear SpellBad
autocmd FileType asm highlight clear SpellCap
autocmd FileType asm highlight clear SpellRare
autocmd FileType asm highlight clear SpellLocal

" auto-load cscope
function! LoadCscope()
    let db = findfile("cscope.out", ".;")
    if (!empty(db))
        let path = strpart(db, 0, match(db, "/cscope.out$"))
        set nocsverb " suppress 'duplicate connection' error
        exe "cs add " . db . " " . path
        set csverb
    endif
endfunction
au BufEnter /* call LoadCscope()

""" vvv NeoComplete configurations vvv """

"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType c setlocal omnifunc=ccomplete#Complete
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

""" ^^^ NeoComplete configurations ^^^ """

""" vvv rainbow configurations vvv """

let g:rainbow_conf = {
    \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \   'operators': '_,_',
    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \   'separately': {
    \       '*': {},
    \       'tex': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \       },
    \       'lisp': {
    \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \       },
    \       'vim': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \       },
    \       'html': {
    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \       },
    \       'css': 0,
    \   }
    \}

""" ^^^ rainbow configurations ^^^ """
